AWSTemplateFormatVersion: '2010-09-09'
Description: 'Infrastructure for the profile service'

Parameters:
  DeployTime:
    Type: String
    Description: Time of deployment

  LambdaLayerS3Key:
    Type: String
    Description: S3 key for the Lambda layer

Resources:

  ### roles ###
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CreateProfileLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource: !GetAtt ProfilesTable.Arn

  ### profiles table ###
  ProfilesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Profiles
      AttributeDefinitions:
        - AttributeName: ProfileId
          AttributeType: S
      KeySchema:
        - AttributeName: ProfileId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  ### profile interactions table ###
  ProfileInteractionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ProfileInteractions
      AttributeDefinitions:
        - AttributeName: ProfileId
          AttributeType: S
        - AttributeName: TargetProfileId
          AttributeType: S
        - AttributeName: Status
          AttributeType: S
      KeySchema:
        - AttributeName: ProfileId
          KeyType: HASH
        - AttributeName: TargetProfileId
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: TargetProfileIndex
          KeySchema:
            - AttributeName: TargetProfileId
              KeyType: HASH
            - AttributeName: Status
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  ### profile complaints table ###
  ProfileComplaintsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ProfileGrievances
      AttributeDefinitions:
        - AttributeName: ComplainedProfileId
          AttributeType: S
        - AttributeName: ComplaintId
          AttributeType: S
        - AttributeName: Resolved
          AttributeType: N
      KeySchema:
        - AttributeName: ComplainedProfileId
          KeyType: HASH
        - AttributeName: ComplaintId
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: ResolvedComplaintsIndex
          KeySchema:
            - AttributeName: ComplainedProfileId
              KeyType: HASH
            - AttributeName: Resolved
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  ### table to store profile images ###
  ProfileImagesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ProfileImages
      AttributeDefinitions:
        - AttributeName: ProfileId
          AttributeType: S
        - AttributeName: PictureId
          AttributeType: S
      KeySchema:
        - AttributeName: ProfileId
          KeyType: HASH
        - AttributeName: PictureId
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  # ==============================================================================
  # ================================ API Gateway =================================
  # ==============================================================================
  ProfileApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${AWS::StackName}-api
      Description: !Sub API for ${AWS::StackName}
      FailOnWarnings: true
      EndpointConfiguration:
        Types:
          - EDGE

  # ====================> update profile api resource <==================== #
  UpdateProfileResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ProfileApi.RootResourceId
      PathPart: update-profile
      RestApiId: !Ref ProfileApi

  ### profile api method ###
  UpdateProfileMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref UpdateProfileResource
      RestApiId: !Ref ProfileApi
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateProfileFunction.Arn}/invocations

  # ====================> upload image api resource <==================== #
  UploadImageResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ProfileApi.RootResourceId
      PathPart: upload-image
      RestApiId: !Ref ProfileApi

  ### upload profile image method ###
  UploadImageMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref UploadImageResource
      RestApiId: !Ref ProfileApi
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UploadProfileImageFunction.Arn}/invocations


  # ====================> profile api deployment resource <==================== #
  ProfileDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
        - UpdateProfileMethod
        - UploadImageMethod
    Properties:
      RestApiId: !Ref ProfileApi
      StageName: prod


  # ==============================================================================
  # ================================== Lambdas ===================================
  # ==============================================================================

  ProfileServiceLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: ProfileServiceLayer
      Description: Node.js dependencies for Profile Service
      Content:
        S3Bucket: !ImportValue marhabaah-base-code
        S3Key: !Ref LambdaLayerS3Key
      CompatibleRuntimes:
        - nodejs20.x

  # ====================> update profile <==================== #
  UpdateProfileFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: handlers/update-profile.handler
      Code:
        S3Bucket: !ImportValue marhabaah-base-code
        S3Key: !Sub ${AWS::StackName}/update-profile_${DeployTime}.zip
      Runtime: nodejs20.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      Layers:
        - !Ref ProfileServiceLayer
      Environment:
        Variables:
          DB_TABLE_PROFILES: !Ref ProfilesTable

  # ====================> upload profile image lambda <==================== #
  UploadProfileImageFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: handlers/upload-profile-image.handler
      Code:
        S3Bucket: !ImportValue marhabaah-base-code
        S3Key: !Sub ${AWS::StackName}/upload-profile-image_${DeployTime}.zip
      Runtime: nodejs20.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      Layers:
        - !Ref ProfileServiceLayer
      Environment:
        Variables:
          DB_TABLE_PROFILES: !Ref ProfilesTable
          
  # ==============================================================================
  # ========================== LAMBDA & API PERMISSIONS ==========================
  # ==============================================================================
  UpdateProfileApiGatewayInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt UpdateProfileFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ProfileApi}/*/POST/update-profile


Outputs:
  ProfilesTableName:
    Description: Name of the profile table
    Value: !Ref ProfilesTable

  ProfileInteractionsTableName:
    Description: Name of the profile interactions table
    Value: !Ref ProfileInteractionsTable

  ProfileComplaintsTableName:
    Description: Name of the profile complaints table
    Value: !Ref ProfileComplaintsTable

  ProfileApiId:
    Description: ID of the profile API
    Value: !Ref ProfileApi



