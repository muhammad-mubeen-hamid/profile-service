name: Deploy Profile Service

on:
  push:
    branches:
      - master

env:
  SERVICE_NAME: profile-service

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          echo "@muhammad-mubeen-hamid:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.MARHABA_GITHUB_TOKEN }}" >> .npmrc
          yarn install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.MARHABA_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.MARHABA_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Get current time
        id: current_time
        run: echo "current_time=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_ENV

      - name: Bundle and Compile Lambda Functions with esbuild
        run: |
          node esbuild.js

      - name: Create Lambda Layer Package
        run: |
          mkdir -p layer/nodejs
          cp -r node_modules/ layer/nodejs/
          cd layer
          zip -r9 ../layer.zip .
          cd ..

      - name: Upload Lambda Layer to S3
        run: |
          aws s3 cp layer.zip s3://${{ secrets.LAMBDA_CODE_BUCKET_NAME }}/layers/${{ env.SERVICE_NAME }}/layer.zip

      - name: Upload Lambda packages to S3
        run: |
          for file in dist/*.js; do
            base_name=$(basename "$file" .js)
            suffix="${{ env.current_time }}"
            new_name="${base_name}_${suffix}.zip"
            zip -r $new_name $file
            aws s3 cp "$new_name" "s3://${{ secrets.LAMBDA_CODE_BUCKET_NAME }}/${{ env.SERVICE_NAME }}/$new_name"
            echo "S3_KEY_${base_name^^}=$new_name" >> $GITHUB_ENV
          done

      - name: Deploy CloudFormation stack
        run: |
          aws cloudformation deploy \
          --template-file ./infrastructure.yml \
          --stack-name profile-service \
          --capabilities CAPABILITY_NAMED_IAM \
          --parameter-overrides LambdaLayerS3Key=layers/${{ env.SERVICE_NAME }}/layer.zip DeployTime=${{ env.current_time }}

      - name: Create API Gateway Deployment
        run: |
          echo "Creating API Gateway deployment"
          API_ID=$(aws cloudformation describe-stacks --stack-name profile-service --query "Stacks[0].Outputs[?OutputKey=='ProfileApiId'].OutputValue" --output text)
          aws apigateway create-deployment --rest-api-id $API_ID --stage-name prod

      - name: Post-deployment verification
        run: |
          aws cloudformation describe-stacks --stack-name profile-service
