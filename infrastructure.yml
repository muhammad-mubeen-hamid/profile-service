AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation Template for Profile Service

Parameters:
  DeployTime:
    Type: String
    Description: The time at which the deployment is happening

  Stage:
    Type: String
    Description: The stage of the deployment

  NodeVersion:
    Type: String
    Description: Node version

  CodeBucket:
    Type: String
    Description: S3 bucket for the Lambda code

Resources:
  # ============================================================================================================================================================
  # ==================================================================== TABLES ================================================================================
  # ============================================================================================================================================================

  ProfileTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub Profile
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  # ============================================================================================================================================================
  # ================================================================= API SCHEMA ===============================================================================
  # ============================================================================================================================================================
  UpdateProfileSchema:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId: !Ref Api
      ContentType: application/json
      Schema:
        type: object
        properties:
          sub:
            type: string
          phone:
            type: string
        required:
          - sub

  # ============================================================================================================================================================
  # ================================================================= API GATEWAY ==============================================================================
  # ============================================================================================================================================================

  Api:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${AWS::StackName}-api
      Description: !Sub API for ${AWS::StackName}

  RequestValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties:
      RestApiId: !Ref Api
      ValidateRequestBody: true
      ValidateRequestParameters: false

  # ===============================> API v1 <===============================
  ApiV1:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt Api.RootResourceId
      PathPart: v1
      RestApiId: !Ref Api

  # ==========================> API v1 authorizer <==========================
  ApiAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: ProfileAuthorizer
      Type: TOKEN
      AuthorizerUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthorizerFunction.Arn}/invocations
      IdentitySource: method.request.header.Authorization
      RestApiId: !Ref Api

  # ===========================================================================
  # ===============================> Profile <=================================
  # ===========================================================================

  # ==============================> Resource <=================================
  ProfileResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref ApiV1
      PathPart: profile
      RestApiId: !Ref Api

  # =======================> Sub Resource - /{profileId} <=====================
  ProfileByIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref ProfileResource
      PathPart: "{profileId}"
      RestApiId: !Ref Api

  # GET
  GetProfileMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref ProfileByIdResource
      RestApiId: !Ref Api
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref ApiAuthorizer
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetProfile.Arn}/invocations
      RequestParameters:
        method.request.path.profileId: true

  # POST
  UpdateProfileMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref ProfileByIdResource
      RestApiId: !Ref Api
      AuthorizationType: NONE
      RequestModels:
        application/json: !Ref UpdateProfileSchema
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateProfile.Arn}/invocations
      RequestParameters:
        method.request.path.profileId: true


  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - GetProfile
      - UpdateProfileMethod
    Properties:
      RestApiId: !Ref Api

  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref Api
      DeploymentId: !Ref ApiDeployment
      StageName: !Ref Stage
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          LoggingLevel: 'INFO'
          DataTraceEnabled: true


  # ============================================================================================================================================================
  # =============================================================== LAMBDA FUNCTIONS ===========================================================================
  # ============================================================================================================================================================

  ServiceLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: ProfileServiceLayer
      Description: Node.js dependencies for Profile Service
      Content:
        S3Bucket: !Ref CodeBucket
        S3Key: !Sub layers/${AWS::StackName}/layer.zip
      CompatibleRuntimes:
        - !Ref NodeVersion

  # ==========================> Get Profile <===========================
  AuthorizerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: authorizer.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: !Ref NodeVersion
      Code:
        S3Bucket: !Ref CodeBucket
        S3Key: !Sub ${AWS::StackName}/authorizer_${DeployTime}.js.zip
      Layers:
        - !Ref ServiceLayer
      Environment:
        Variables:
          USER_POOL_ID: !ImportValue cognito-service-UserPoolId
          REGION: !Ref AWS::Region


  # ==========================> Get Profile <===========================
  GetProfile:
    Type: AWS::Lambda::Function
    Properties:
      Handler: get-profile.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: !Ref NodeVersion
      Code:
        S3Bucket: !Ref CodeBucket
        S3Key: !Sub ${AWS::StackName}/get-profile_${DeployTime}.js.zip
      Layers:
        - !Ref ServiceLayer
      Environment:
        Variables:
          PROFILE_TABLE: !Ref ProfileTable

  # =========================> Update Profile <=========================
  UpdateProfile:
    Type: AWS::Lambda::Function
    Properties:
      Handler: update-profile.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: !Ref NodeVersion
      Code:
        S3Bucket: !Ref CodeBucket
        S3Key: !Sub ${AWS::StackName}/update-profile_${DeployTime}.js.zip
      Layers:
        - !Ref ServiceLayer
      Environment:
        Variables:
          PROFILE_TABLE: !Ref ProfileTable

  # ============================================================================================================================================================
  # ============================================================= LAMBDA & API PERMISSIONS =====================================================================
  # ============================================================================================================================================================

  # ================> Api Gateway =invokes=> Authorizer Lambda <==================
  AuthorizerLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt AuthorizerFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*

  # ================> Api Gateway =invokes=> GetProfile Lambda <===================
  GetUserApiGatewayInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt GetProfile.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/GET/v1/profile/*

  # ===============> Api Gateway =invokes=> UpdateProfile Lambda <=================
  UpdateProfileApiGatewayInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt UpdateProfile.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/POST/v1/profile/*

  # ============================================================================================================================================================
  # =============================================================== ROLES & POLICIES ===========================================================================
  # ============================================================================================================================================================
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaCloudWatchLogging
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

  # ============================================================================================================================================================
  # =================================================================== OUTPUTS ================================================================================
  # ============================================================================================================================================================

Outputs:
  CurrentRegion:
    Description: "The region in which this stack is deployed"
    Value: !Ref AWS::Region

  CurrentAccountId:
    Description: "The AWS Account ID in which this stack is deployed"
    Value: !Ref AWS::AccountId

  ApiUrl:
    Description: "API Gateway endpoint URL for Cognito application"
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/prod"

  ApiId:
    Description: "API Gateway endpoint URL for Cognito service"
    Value: !Ref Api