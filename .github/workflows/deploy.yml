name: Deploy Profile Service

on:
  push:
    branches:
      - test

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Read parameter file and export environment variables
        id: read_params
        run: |
          param_file="./test.config.json"
          jq -r 'to_entries | map("\(.key)=\(.value|tostring)") | .[]' $param_file | while IFS= read -r line; do
            echo "$line" >> $GITHUB_ENV
          done

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          echo "@muhammad-mubeen-hamid:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.MARHABA_GITHUB_TOKEN }}" >> .npmrc
          yarn install

      - name: Bundle and Compile Lambda Functions
        run: |
          yarn install --frozen-lockfile
          yarn build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.MARHABA_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.MARHABA_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.Region }}

      - name: Clear S3 Code and Layer
        run: |
          aws s3 rm "s3://${{ env.CodeBucket }}" --recursive
          aws s3 rm "s3://${{ env.CodeBucket }}/layers" --recursive

      - name: Get current time
        id: current_time
        run: echo "CurrentTime=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_ENV

      - name: Install TypeScript
        run: yarn global add typescript

      - name: Print GITHUB_ENV contents
        run: cat $GITHUB_ENV

      - name: Upload Lambda Layer
        run: |
          rm -rf node_modules yarn.lock
          yarn cache clean
          yarn install --production
          mkdir -p layer/nodejs
          cp -r node_modules/ layer/nodejs/
          cd layer
          zip -r9 ../layer.zip .
          du -sh nodejs
          cd ..

      - name: Upload Lambda Layer to S3
        run: |
          aws s3 cp layer.zip s3://${{ env.CodeBucket }}/layers/${{ env.ServiceName }}/layer.zip

      - name: Upload Lambda Functions
        run: |
          cd ./dist
          echo "Current time is ${{ env.CurrentTime }}"
          for file in *.js; do
            base_name=$(basename "$file" .js)
            zip_name="${base_name}_${{ env.CurrentTime }}.js.zip"
            zip "$zip_name" "$file"
            aws s3 cp "$zip_name" "s3://${{ env.CodeBucket }}/${{ env.ServiceName }}/${zip_name}"
          done

      - name: Deploy using CloudFormation
        run: |
          echo "Deploying to ${{ env.Stage }} at ${{ env.CurrentTime }}"
          aws cloudformation deploy \
            --template-file ./infrastructure.yml \
            --stack-name ${{ env.ServiceName }} \
            --capabilities CAPABILITY_IAM \
            --parameter-overrides $(jq -r 'to_entries | map("\(.key)=\(.value|tostring)") | .[]' ./test.config.json) DeployTime=${{ env.CurrentTime }}

      - name: Create API Gateway Deployment
        run: |
          echo "Creating API Gateway deployment"
          API_ID=$(aws cloudformation describe-stacks --stack-name ${{ env.ServiceName }} --query "Stacks[0].Outputs[?OutputKey=='ApiId'].OutputValue" --output text)
          aws apigateway create-deployment --rest-api-id $API_ID --stage-name ${{ env.Stage }}

      - name: Print GITHUB_ENV contents
        run: cat $GITHUB_ENV
