AWSTemplateFormatVersion: '2010-09-09'
Description: 'Infrastructure for the profile service'

Resources:

  ### roles ###
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CreateProfileLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource: !GetAtt UsersTable.Arn

  ### Users Table ###
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Users
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Tags:
        - Key: Environment
          Value: Production

  ### User Interactions Table ###
  UserInteractionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: UserInteractions
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
        - AttributeName: TargetUserId
          AttributeType: S
        - AttributeName: Status
          AttributeType: S
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH
        - AttributeName: TargetUserId
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: TargetUserIndex
          KeySchema:
            - AttributeName: TargetUserId
              KeyType: HASH
            - AttributeName: Status
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  ### User Complaints Table ###
  UserComplaintsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: UserGrievances
      AttributeDefinitions:
        - AttributeName: ComplainedUserId
          AttributeType: S
        - AttributeName: ComplaintId
          AttributeType: S
        - AttributeName: Resolved
          AttributeType: N
      KeySchema:
        - AttributeName: ComplainedUserId
          KeyType: HASH
        - AttributeName: ComplaintId
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: ResolvedComplaintsIndex
          KeySchema:
            - AttributeName: ComplainedUserId
              KeyType: HASH
            - AttributeName: Resolved
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  ### profile api ###
  ProfileApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ProfileApi
      Description: API for the profile service
      FailOnWarnings: true
      EndpointConfiguration:
        Types:
          - EDGE

  ### profile api resource ###
  ProfileResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ProfileApi.RootResourceId
      PathPart: profile
      RestApiId: !Ref ProfileApi

  ### profile api method ###
  ProfileMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref ProfileResource
      RestApiId: !Ref ProfileApi
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateProfileFunction.Arn}/invocations


  ### profile api deployment ###
  ProfileDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
        - ProfileMethod
    Properties:
      RestApiId: !Ref ProfileApi
      StageName: prod

  ### create profile ###
  CreateProfileFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: create-profile.handler
      Code:
        S3Bucket: !ImportValue marhabaah-base-code
        S3Key: create-profile.zip
      Runtime: nodejs20.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_TABLE_USERS: !Ref UsersTable


Outputs:
  UsersTableName:
    Description: Name of the Users table
    Value: !Ref UsersTable

  UserInteractionsTableName:
    Description: Name of the User Interactions table
    Value: !Ref UserInteractionsTable

  UserComplaintsTableName:
    Description: Name of the User Complaints table
    Value: !Ref UserComplaintsTable



